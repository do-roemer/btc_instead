from faker import Faker
import uuid
import random
from decimal import Decimal
import json


fake = Faker()

NUM_POSTS = 30  # How many Reddit posts/portfolios to generate
MAX_PURCHASES_PER_PORTFOLIO = 8
MIN_PURCHASES_PER_PORTFOLIO = 2
POSSIBLE_PURCHASES = [
    'Bitcoin (BTC)', 'Ethereum (ETH)', 'Cardano (ADA)', 'Solana (SOL)',
    'Polkadot (DOT)', 'Dogecoin (DOGE)', 'Shiba Inu (SHIB)',
    'Avalanche (AVAX)', 'Binance Coin (BNB)', 'XRP (XRP)',
    'Litecoin (LTC)', 'Chainlink (LINK)'
]


def generate_mock_data():
    """Generates lists of mock data for all three tables."""
    reddit_posts = []
    portfolios = []
    portfolio_purchases = []
    generated_uids = set()

    print(f"Generating mock data for {NUM_POSTS} posts...")

    for i in range(NUM_POSTS):
        # Ensure unique UID
        while True:
            uid = str(uuid.uuid4())
            if uid not in generated_uids:
                generated_uids.add(uid)
                break

        # 1. Generate Reddit Post Data
        post = {
            'uid': uid,
            'username': fake.user_name(),
            'user_url':
                f"https://www.reddit.com/user/{fake.user_name()}",
            'post_id':
                f"t3_{fake.unique.bothify(text='??????')}",
            'title': fake.sentence(nb_words=6),
            'content': fake.paragraph(nb_sentences=5),
            'post_url':
                f"https://www.reddit.com",
            'subreddit': "test_subreddit",
            'image_url':
                fake.image_url() if random.choice([True, False])
                else None,
            'tags': "portfolio",
            'post_created_utc': fake.date_time_this_year(),
            'is_portfolio': random.choice([True, False]),
        }
        reddit_posts.append(post)

        # 2. Generate Portfolio Data (links to post via UID)
        portfolio = {
            'portfolio_uid': uid,
            'current_value': Decimal(
                random.uniform(0.01, 60000.00)).quantize(
                    Decimal('0.01')),
            'total_investment': Decimal(
                random.uniform(0.01, 60000.00)).quantize(
                    Decimal('0.01')),
            'roi': Decimal(
                random.uniform(-100.00, 100.00)).quantize(
                    Decimal('0.01')),
            'btc_instead_amount': Decimal(
                random.uniform(0.01, 60000.00)).quantize(
                    Decimal('0.01')),
            'btc_instead_value': Decimal(
                random.uniform(0.01, 60000.00)).quantize(
                    Decimal('0.01')),
            'btc_instead_roi': Decimal(
                random.uniform(-100.00, 100.00)).quantize(
                    Decimal('0.01'))
        }
        portfolios.append(portfolio)

        # 3. Generate Portfolio Purchases Data
        num_purchases = random.randint(
            MIN_PURCHASES_PER_PORTFOLIO,
            MAX_PURCHASES_PER_PORTFOLIO)
        # Ensure we don't pick the same purchase twice for one portfolio
        purchases_in_this_portfolio = random.sample(
            POSSIBLE_PURCHASES, k=min(num_purchases, len(POSSIBLE_PURCHASES)))

        for purchase_name in purchases_in_this_portfolio:
            purchase = {
                # 'purchase_id': Will be auto-generated by DB (assuming AUTO_INCREMENT)
                'portfolio_uid': uid,
                'purchase_name': purchase_name,
                'amount': Decimal(
                    random.uniform(0.01, 10000.00)).quantize(
                        Decimal('0.01')),
                'purchase_price': Decimal(
                    random.uniform(0.01, 60000.00)).quantize(
                        Decimal('0.01')),
                'purchase_date': fake.date_time_this_year(),
            }
            portfolio_purchases.append(purchase)

    print("Mock data generation complete.")
    return reddit_posts, portfolios, portfolio_purchases


def save_mock_data_to_json(reddit_posts, portfolios, portfolio_purchases):
    """Saves the generated mock data to JSON files."""
    with open("data/mock_reddit_posts.json", "w") as file:
        json.dump(reddit_posts, file, indent=4, default=str)
    with open("data/mock_portfolio.json", "w") as file:
        json.dump(portfolios, file, indent=4, default=str)
    with open("data/mock_portfolio_purchases.json", "w") as file:
        json.dump(portfolio_purchases, file, indent=4, default=str)


if __name__ == "__main__":
    reddit_posts, portfolios, portfolio_purchases = generate_mock_data()
    save_mock_data_to_json(reddit_posts, portfolios, portfolio_purchases)
    print("Mock data saved to JSON files.")